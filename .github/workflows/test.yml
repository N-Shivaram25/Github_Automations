name: Run Tests for Solution Files

on:
  push:
    paths:
      - 'solutions/**'
  pull_request:
    paths:
      - 'solutions/**'

jobs:
  validate-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch enough history to compare changes

      # Check number of changed solution files
      - name: Check changed solution files
        id: check-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^solutions/' | wc -l)
          if [ $CHANGED_FILES -gt 1 ]; then
            echo "Error: Multiple solution files changed. Only one solution file can be modified at a time."
            exit 1
          fi
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      # Get changed file
      - name: Get changed file
        id: changed-file
        run: |
          CHANGED_FILE=$(git diff --name-only HEAD^ HEAD | grep '^solutions/' || true)
          echo "Changed file: $CHANGED_FILE"
          echo "file=$CHANGED_FILE" >> $GITHUB_OUTPUT

      # Validate code completeness
      - name: Validate code completeness
        if: steps.check-changes.outputs.changed_files != '0'
        run: |
          CHANGED_FILE=${{ steps.changed-file.outputs.file }}
          if [ -z "$CHANGED_FILE" ]; then
            echo "No solution file changed, skipping validation"
            exit 0
          fi
          
          # Check if file is empty
          if [ ! -s "$CHANGED_FILE" ]; then
            echo "Error: Solution file is empty"
            exit 1
          fi
          
          # Basic syntax check based on file extension
          case "$CHANGED_FILE" in
            *.c)
              gcc -fsyntax-only "$CHANGED_FILE" || { echo "Error: Invalid C code"; exit 1; }
              ;;
            *.cpp)
              g++ -fsyntax-only "$CHANGED_FILE" || { echo "Error: Invalid C++ code"; exit 1; }
              ;;
            *.java)
              javac -Xlint:all "$CHANGED_FILE" || { echo "Error: Invalid Java code"; exit 1; }
              ;;
            *.py)
              python3 -m py_compile "$CHANGED_FILE" || { echo "Error: Invalid Python code"; exit 1; }
              ;;
            *)
              echo "Error: Unsupported file extension for $CHANGED_FILE"
              exit 1
              ;;
          esac

      # Install dependencies based on file type
      - name: Install dependencies
        if: steps.check-changes.outputs.changed_files != '0'
        run: |
          CHANGED_FILE=${{ steps.changed-file.outputs.file }}
          case "$CHANGED_FILE" in
            *.c)
              sudo apt-get update
              sudo apt-get install -y gcc
              ;;
            *.cpp)
              sudo apt-get update
              sudo apt-get install -y g++ build-essential
              ;;
            *.java)
              sudo apt-get update
              sudo apt-get install -y openjdk-17-jdk
              ;;
            *.py)
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip
              ;;
            *)
              echo "Error: Unsupported file extension for $CHANGED_FILE"
              exit 1
              ;;
          esac

      # Run tests
      - name: Run tests
        if: steps.check-changes.outputs.changed_files != '0'
        run: |
          CHANGED_FILE=${{ steps.changed-file.outputs.file }}
          FILENAME=$(basename "$CHANGED_FILE")
          EXT="${FILENAME##*.}"
          
          # Map solution to corresponding test file and run
          case "$EXT" in
            c)
              TEST_FILE="tests/test.c"
              SOLUTION_FILE="$CHANGED_FILE"
              gcc -o test "$SOLUTION_FILE" "$TEST_FILE" -I. || { echo "Error: Compilation failed"; exit 1; }
              ./test || { echo "Error: Test execution failed"; exit 1; }
              ;;
            cpp)
              TEST_FILE="tests/test.cpp"
              SOLUTION_FILE="$CHANGED_FILE"
              g++ -o test "$SOLUTION_FILE" "$TEST_FILE" -I. -std=c++11 || { echo "Error: Compilation failed"; exit 1; }
              ./test || { echo "Error: Test execution failed"; exit 1; }
              ;;
            java)
              TEST_FILE="tests/Test.java"
              SOLUTION_FILE="$CHANGED_FILE"
              # Compile both solution and test files
              javac "$SOLUTION_FILE" "$TEST_FILE" || { echo "Error: Compilation failed"; exit 1; }
              # Run the test file (assuming Test.java has the main method)
              java -cp tests Test || { echo "Error: Test execution failed"; exit 1; }
              ;;
            py)
              TEST_FILE="tests/test.py"
              python3 "$TEST_FILE" || { echo "Error: Test execution failed"; exit 1; }
              ;;
            *)
              echo "Error: Unsupported file extension for $CHANGED_FILE"
              exit 1
              ;;
          esac