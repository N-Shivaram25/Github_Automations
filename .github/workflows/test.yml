name: Run Language-Specific Tests

on:
  push:
    paths:
      - 'solutions/**'
      - 'tests/**'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'solutions/**'
      - 'tests/**'
      - '.github/workflows/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)
          fi

          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/' | sort -u)
          echo "Detected changed files: $CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected in solutions/ directory. Exiting..."
            exit 1
          fi

          INCOMPLETE_FILES=""
          for file in $CHANGED_FILES; do
            echo "Checking file: $file"
            if [ ! -s "$file" ]; then
              INCOMPLETE_FILES="$INCOMPLETE_FILES $file (empty file)"
            elif [[ "$file" == *.c ]]; then
              if ! grep -qE '^\s*bool\s+searchKey\s*\(\s*int\s+n\s*,\s*struct\s+Node\*\s+head\s*,\s*int\s+key\s*\)\s*\{' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing searchKey function)"
              else
                LINE_NUM=$(grep -nE '^\s*bool\s+searchKey\s*\(\s*int\s+n\s*,\s*struct\s+Node\*\s+head\s*,\s*int\s+key\s*\)\s*\{' "$file" | cut -d: -f1)
                END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
                if [ -n "$END_LINE" ]; then
                  IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 2)) | grep -vE '^\s*(//|/\*.*\*/$|^$)' | grep -E '^\s*[^\s#].*')
                  LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
                  if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file (incomplete searchKey implementation)"
                  fi
                else
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file (no closing brace for searchKey)"
                fi
              fi
              if ! grep -qE '^\s*struct\s+Node\*\s+buildLinkedList\s*\(\s*int\s+arr\[\]\s*,\s*int\s+size\s*\)\s*\{' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing buildLinkedList function)"
              else
                LINE_NUM=$(grep -nE '^\s*struct\s+Node\*\s+buildLinkedList\s*\(\s*int\s+arr\[\]\s*,\s*int\s+size\s*\)\s*\{' "$file" | cut -d: -f1)
                END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
                if [ -n "$END_LINE" ]; then
                  IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 2)) | grep -vE '^\s*(//|/\*.*\*/$|^$)' | grep -E '^\s*[^\s#].*')
                  LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
                  if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file (incomplete buildLinkedList implementation)"
                  fi
                else
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file (no closing brace for buildLinkedList)"
                fi
              fi
            elif [[ "$file" == *.py ]]; then
              if ! grep -qE '^\s*def\s+build_linked_list\s*\(\s*arr\s*\):' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing build_linked_list function)"
              else
                LINE_NUM=$(grep -nE '^\s*def\s+build_linked_list\s*\(\s*arr\s*\):' "$file" | cut -d: -f1)
                TAIL_OUTPUT=$(tail -n +$LINE_NUM "$file")
                END_LINE=$(echo "$TAIL_OUTPUT" | tail -n +2 | grep -nE '^\s*def' | head -n 1 | cut -d: -f1)
                if [ -z "$END_LINE" ]; then
                  END_LINE=$(wc -l <<< "$TAIL_OUTPUT")
                else
                  END_LINE=$((END_LINE + 1))
                fi
                IMPLEMENTATION=$(tail -n +2 <<< "$TAIL_OUTPUT" | head -n $((END_LINE - 1)) 2>/dev/null || echo "Extraction failed")
                LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*(#.*$|"""|''''''|^$)' | grep -vE '^\s*$' | wc -l)
                if [ "$LINE_COUNT" -le 3 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file (incomplete build_linked_list implementation)"
                fi
              fi
              if ! grep -qE '^\s*def\s+searchKey\s*\(\s*self\s*,\s*n\s*,\s*head\s*,\s*key\s*\):' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing searchKey method)"
              else
                LINE_NUM=$(grep -nE '^\s*def\s+searchKey\s*\(\s*self\s*,\s*n\s*,\s*head\s*,\s*key\s*\):' "$file" | cut -d: -f1)
                TAIL_OUTPUT=$(tail -n +$LINE_NUM "$file")
                END_LINE=$(echo "$TAIL_OUTPUT" | tail -n +2 | grep -nE '^\s*def' | head -n 1 | cut -d: -f1)
                if [ -z "$END_LINE" ]; then
                  END_LINE=$(wc -l <<< "$TAIL_OUTPUT")
                else
                  END_LINE=$((END_LINE + 1))
                fi
                IMPLEMENTATION=$(tail -n +2 <<< "$TAIL_OUTPUT" | head -n $((END_LINE - 1)) 2>/dev/null || echo "Extraction failed")
                LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*(#.*$|"""|''''''|^$)' | grep -vE '^\s*$' | wc -l)
                if [ "$LINE_COUNT" -le 3 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file (incomplete searchKey implementation)"
                fi
              fi
            elif [[ "$file" == *.cpp ]]; then
              if ! grep -qE '^\s*bool\s+searchKey\s*\(\s*int\s+n\s*,\s*Node\*\s+head\s*,\s*int\s+key\s*\)\s*\{' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing searchKey method)"
              fi
            elif [[ "$file" == *.java ]]; then
              if ! grep -qE '^\s*public\s+static\s+boolean\s+searchKey\s*\(\s*int\s+n\s*,\s*Node\s+head\s*,\s*int\s+key\s*\)\s*\{' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing searchKey method)"
              fi
              if ! grep -qE '^\s*public\s+static\s+Node\s+buildLinkedList\s*\(\s*int\[\]\s+arr\s*,\s*int\s+n\s*\)\s*\{' "$file"; then
                INCOMPLETE_FILES="$INCOMPLETE_FILES $file (missing buildLinkedList method)"
              fi
            fi
          done

          if [ -n "$INCOMPLETE_FILES" ]; then
            echo "::error file=Check failed::The following files are incomplete: $INCOMPLETE_FILES"
            exit 1
          fi

      - name: Setup for Language
        id: setup-lang
        run: |
          LANG_CHANGED=""
          for file in $CHANGED_FILES; do
            case "$file" in
              *.c) LANG_CHANGED="c";;
              *.cpp) LANG_CHANGED="cpp";;
              *.py) LANG_CHANGED="python";;
              *.java) LANG_CHANGED="java";;
            esac
          done

          echo "Detected language: $LANG_CHANGED"
          echo "lang=$LANG_CHANGED" >> $GITHUB_OUTPUT

      - name: Run C Tests
        if: steps.setup-lang.outputs.lang == 'c'
        run: gcc tests/test.c solutions/solution.c -o test && ./test

      - name: Run C++ Tests
        if: steps.setup-lang.outputs.lang == 'cpp'
        run: g++ tests/test.cpp solutions/solution.cpp -o test && ./test

      - name: Run Python Tests
        if: steps.setup-lang.outputs.lang == 'python'
        run: python3 tests/test.py

      - name: Run Java Tests
        if: steps.setup-lang.outputs.lang == 'java'
        run: |
          javac tests/Test.java solutions/Solution.java
          java -cp tests Test