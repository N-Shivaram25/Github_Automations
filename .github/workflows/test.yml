name: Solution Testing Workflow

on:
  push:
    paths:
      - 'solutions/**'
  pull_request:
    paths:
      - 'solutions/**'

jobs:
  check-single-file-change:
    runs-on: ubuntu-latest
    outputs:
      changed_file: ${{ steps.check-files.outputs.changed_file }}
      language: ${{ steps.detect-language.outputs.language }}
      file_basename: ${{ steps.parse-filename.outputs.basename }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for single file change
        id: check-files
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "^solutions/")
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "^solutions/")
          fi
          
          echo "Changed solution files:"
          echo "$CHANGED_FILES"
          
          # Count how many solution files were changed
          CHANGED_COUNT=$(echo "$CHANGED_FILES" | grep -v "^$" | wc -l)
          
          if [ "$CHANGED_COUNT" -gt 1 ]; then
            echo "::error::Multiple solution files were changed in this commit. Please modify only one solution file at a time."
            exit 1
          elif [ "$CHANGED_COUNT" -eq 0 ]; then
            echo "No solution files were changed."
            exit 0
          else
            echo "changed_file=$CHANGED_FILES" >> $GITHUB_OUTPUT
          fi

      - name: Detect programming language
        id: detect-language
        if: steps.check-files.outputs.changed_file != ''
        run: |
          FILE="${{ steps.check-files.outputs.changed_file }}"
          if [[ "$FILE" == *.py ]]; then
            echo "language=python" >> $GITHUB_OUTPUT
          elif [[ "$FILE" == *.c ]]; then
            echo "language=c" >> $GITHUB_OUTPUT
          elif [[ "$FILE" == *.cpp ]]; then
            echo "language=cpp" >> $GITHUB_OUTPUT
          elif [[ "$FILE" == *.java ]]; then
            echo "language=java" >> $GITHUB_OUTPUT
          else
            echo "::error::Unsupported file type: $FILE"
            exit 1
          fi
      
      - name: Parse filename
        id: parse-filename
        if: steps.check-files.outputs.changed_file != ''
        run: |
          FILE="${{ steps.check-files.outputs.changed_file }}"
          BASENAME=$(basename "$FILE" | cut -d. -f1)
          echo "basename=$BASENAME" >> $GITHUB_OUTPUT

  run-tests:
    needs: check-single-file-change
    if: needs.check-single-file-change.outputs.changed_file != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check solution for empty or incomplete code
        run: |
          FILE="${{ needs.check-single-file-change.outputs.changed_file }}"
          # Check if file is empty
          if [ ! -s "$FILE" ]; then
            echo "::error::Solution file is empty."
            exit 1
          fi
          
          # If the file is a Python file, check for common patterns that indicate incomplete code
          if [[ "$FILE" == *.py ]]; then
            # Only match standalone 'pass' statements that are not part of functions/conditionals
            if grep -q "^[[:space:]]*pass[[:space:]]*$" "$FILE" || grep -q "^[[:space:]]*# TODO:" "$FILE"; then
              echo "::error::Solution appears to be incomplete (contains placeholder code)."
              exit 1
            fi
          fi
          
          # If the file is a C/C++ file
          if [[ "$FILE" == *.cpp ]] || [[ "$FILE" == *.c ]]; then
            if grep -q "// TODO:" "$FILE"; then
              echo "::error::Solution appears to be incomplete (contains placeholder code)."
              exit 1
            fi
            
            # Only look for empty function bodies that aren't part of comments
            NON_COMMENT_LINES=$(grep -v "//" "$FILE")
            if echo "$NON_COMMENT_LINES" | grep -q "{[[:space:]]*}"; then
              echo "::error::Solution appears to be incomplete (contains empty function bodies)."
              exit 1
            fi
          fi
          
          # If the file is a Java file
          if [[ "$FILE" == *.java ]]; then
            if grep -q "// TODO:" "$FILE" || grep -q "throw new UnsupportedOperationException" "$FILE"; then
              echo "::error::Solution appears to be incomplete (contains placeholder code)."
              exit 1
            fi
            
            # Only look for empty method bodies that aren't part of comments
            NON_COMMENT_LINES=$(grep -v "//" "$FILE" | grep -v "*/")
            if echo "$NON_COMMENT_LINES" | grep -q "{[[:space:]]*}"; then
              echo "::error::Solution appears to be incomplete (contains empty method bodies)."
              exit 1
            fi
          fi

      # Setup for Python
      - name: Set up Python
        if: needs.check-single-file-change.outputs.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        if: needs.check-single-file-change.outputs.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest numpy pandas
          # Add more dependencies as needed for specific problems

      # Setup for C/C++
      - name: Set up C/C++ environment
        if: needs.check-single-file-change.outputs.language == 'c' || needs.check-single-file-change.outputs.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      # Setup for Java
      - name: Set up JDK
        if: needs.check-single-file-change.outputs.language == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Copy solution to tests directory (for Python)
      - name: Copy Python solution to tests directory
        if: needs.check-single-file-change.outputs.language == 'python'
        run: |
          cp ${{ needs.check-single-file-change.outputs.changed_file }} tests/

      # Test execution for Python
      - name: Run Python tests
        if: needs.check-single-file-change.outputs.language == 'python'
        run: |
          # Make sure the solutions directory is in Python path
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Run the tests with minimal output
          cd tests
          python test.py
        continue-on-error: false

      # Test execution for C
      - name: Run C tests
        if: needs.check-single-file-change.outputs.language == 'c'
        run: |
          # Compile the test file with the solution
          gcc -o test_program tests/test.c ${{ needs.check-single-file-change.outputs.changed_file }} -lm
          
          # Run the tests
          ./test_program
        continue-on-error: false

      # Test execution for C++
      - name: Run C++ tests
        if: needs.check-single-file-change.outputs.language == 'cpp'
        run: |
          # Compile the solution and test files
          g++ -std=c++17 -o test_program tests/test.cpp ${{ needs.check-single-file-change.outputs.changed_file }}
          
          # Run the tests
          ./test_program
        continue-on-error: false

      # Test execution for Java
      - name: Run Java tests
        if: needs.check-single-file-change.outputs.language == 'java'
        run: |
          # Create build directory
          mkdir -p build
          
          # Compile Java files - first compile solution
          javac -d build ${{ needs.check-single-file-change.outputs.changed_file }}
          
          # Then compile test (which may depend on solution)
          javac -d build -cp build tests/Test.java
          
          # Run the tests
          cd build && java Test
        continue-on-error: false

      - name: Test Results Summary
        run: |
          echo "All tests have passed successfully for ${{ needs.check-single-file-change.outputs.changed_file }}!"