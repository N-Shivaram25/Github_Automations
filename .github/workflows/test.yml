name: Solution Testing Workflow

on:
  push:
    paths:
      - 'solutions/**'
  pull_request:
    paths:
      - 'solutions/**'

jobs:
  test-solution:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Identify changed solution files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "^solutions/")
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "^solutions/")
          fi
          
          echo "Changed solution files:"
          echo "$CHANGED_FILES"
          
          # Count changed files
          CHANGED_COUNT=$(echo "$CHANGED_FILES" | grep -v "^$" | wc -l)
          
          if [ "$CHANGED_COUNT" -gt 1 ]; then
            echo "::error::Multiple solution files were changed. Please modify only one file at a time."
            exit 1
          elif [ "$CHANGED_COUNT" -eq 0 ]; then
            echo "No solution files were changed."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "file=$CHANGED_FILES" >> $GITHUB_OUTPUT
            
            # Determine language
            if [[ "$CHANGED_FILES" == *.py ]]; then
              echo "language=python" >> $GITHUB_OUTPUT
            elif [[ "$CHANGED_FILES" == *.c ]]; then
              echo "language=c" >> $GITHUB_OUTPUT
            elif [[ "$CHANGED_FILES" == *.cpp ]]; then
              echo "language=cpp" >> $GITHUB_OUTPUT
            elif [[ "$CHANGED_FILES" == *.java ]]; then
              echo "language=java" >> $GITHUB_OUTPUT
            else
              echo "::error::Unsupported file type"
              exit 1
            fi
          fi

      - name: Check for incomplete Python solution
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'python'
        run: |
          FILE="${{ steps.changed-files.outputs.file }}"
          
          echo "Checking Python solution: $FILE"
          
          # Check for empty file
          if [ ! -s "$FILE" ]; then
            echo "::error::Solution file is empty."
            exit 1
          fi
          
          # Check for standalone pass statements (not part of other words)
          if grep -E '^\s*pass\s*$' "$FILE"; then
            echo "::error::Solution contains empty pass statements."
            exit 1
          fi
          
          # Check for TODO comments
          if grep -E '^\s*#\s*TODO' "$FILE"; then
            echo "::error::Solution contains TODO comments."
            exit 1
          fi
          
          echo "Solution code check passed."

      - name: Set up Python
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest numpy pandas

      - name: Run Python tests
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'python'
        run: |
          echo "Testing Python solution: ${{ steps.changed-files.outputs.file }}"
          
          # Create the simplest possible test runner
          cat > run_tests.py << EOF
import sys
import os
import unittest

# Add root to path
sys.path.insert(0, os.path.abspath('.'))

# Try imports
print("Python path:", sys.path)

# Copy solution.py to root (simplest solution)
with open('${{ steps.changed-files.outputs.file }}', 'r') as src:
    with open('solution.py', 'w') as dst:
        dst.write(src.read())

print("Solution copied to root directory")

# Import test module
sys.path.append('tests')
from test import TestRemoveElements

if __name__ == '__main__':
    print("Running tests...")
    unittest.main(module='test', argv=['first-arg-is-ignored'], exit=False)
EOF
          
          # Copy the test file to root directory as well for simpler imports
          cp tests/test.py .
          
          # Run the test runner
          python run_tests.py

      - name: Set up C/C++ environment
        if: steps.changed-files.outputs.changed == 'true' && (steps.changed-files.outputs.language == 'c' || steps.changed-files.outputs.language == 'cpp')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      - name: Run C tests
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'c'
        run: |
          echo "Testing C solution: ${{ steps.changed-files.outputs.file }}"
          gcc -o test_program tests/test.c ${{ steps.changed-files.outputs.file }} -lm
          ./test_program

      - name: Run C++ tests
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'cpp'
        run: |
          echo "Testing C++ solution: ${{ steps.changed-files.outputs.file }}"
          g++ -std=c++17 -c ${{ steps.changed-files.outputs.file }} -o solution.o
          g++ -std=c++17 -c tests/test.cpp -o test.o
          g++ -std=c++17 solution.o test.o -o test_program
          ./test_program

      - name: Set up JDK
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Java tests
        if: steps.changed-files.outputs.changed == 'true' && steps.changed-files.outputs.language == 'java'
        run: |
          echo "Testing Java solution: ${{ steps.changed-files.outputs.file }}"
          mkdir -p build
          javac -d build ${{ steps.changed-files.outputs.file }} tests/Test.java
          cd build && java Test